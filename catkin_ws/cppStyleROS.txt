Source: http://wiki.ros.org/CppStyleGuide
CppStyleGuideRos

Packages -> under_scored
Topics/Services -> under_scored
All files (.cpp, .hpp) -> under_scored
Libraries -> under_scored (BAD lib_my_great_thing.hpp.... GOOD libmy_great_thing)
Classes/Types -> CamelCased
Functions/Methods -> camelCased
and the functions's arguments -> under_scored
Variables -> under_scored  (i on the outer loop, j on the next innner loop)
Constants -> ALL_CAPITALS
Global Variables -> under_scored with g_ (example: int g_shutdown). Try to not use them 
Namescapes -> under_scored

Indent each block by 2 spaces. Never insert literal tab characters.
The contents of a namespace are not indented.
Braces, both open and close, go on their own lines (no "cuddled braces")

Line length: Maximum line length is 120 characters.
All headers must be protected against multiple inclusion by #ifndef guards, e.g.:

#ifndef PACKAGE_PATH_FILE_H
#define PACKAGE_PATH_FILE_H
...
#endif

Avoid printf and friends (e.g., cout). Instead, use rosconsole for all your outputting needs
Global variables, in particular, are strongly discouraged.

Source: https://github.com/leggedrobotics/ros_best_practices/wiki

Use this file/folder structure for a general ROS package:
package_name
|— config
	|— robots
		|— my_robot.yaml
	|— sensors
		|— velodyne.yaml
		|— hokuyo_laser_range.yaml
|— include/package_name
	|— Class1.hpp
	|— Class2.hpp
|— launch
	|— node1_name.launch
	|— node2_name.launch
|— rviz
	|— package_name.rviz
|— scripts
	|— my_script.py
|— src
	|— Class1.cpp
	|— Class2.cpp
	|— node1_name_node.cpp
	|— node2_name_node.cpp
|— test
	|— Class1Test.cpp
	|— Class2Test.cpp
	|— test_package_name.cpp
|— CMakeLists.txt
|— package.xml

For ROS message and service definitions use:
package_name_msgs
|— action
	|— MyAction.action
|— msg
	|— MyMessage.msg
|— srv
	|— MyService.srv
|— CMakeLists.txt
|— package.xml


- Use topics for publishing continuous streams of data, e.g. sensor data, continuous detection results...
- Use services only for short calculations.
- Use actions for all longer running processes, e.g. grasping, navigation, perception...
- Use parameters for values which are known at launch and are not likely to change during run time.
