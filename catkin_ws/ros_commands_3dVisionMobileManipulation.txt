# source after creating a new package
. ~/git/3DVisionMobileManipulation/catkin_ws/devel/setup.bash
cd <catkin_ws-path>
source devel/setup.bash
source ~/.bashrc

rospack find [package_name]

# Start the realsense with pointcloud topic
$ roslaunch realsense2_camera rs_camera.launch color_width:=1280 color_height:=720 filters:=pointcloud

# Set Camera Controls Using Dynamic Reconfigure Params
$ rosrun rqt_reconfigure rqt_reconfigure

# pointcloud_to_pcd: Record the pointcloud into pcd file
rosrun pcl_ros pointcloud_to_pcd input:=/camera/depth/color/points _prefix:=/home/carlos/temp_files_thesis/pcd_
rosrun pcl_ros pointcloud_to_pcd input:=/camera/depth/color/points _prefix:=/home/carlos/git/3DVisionMobileManipulation/pointCloud/pointCloud_samples/pcd_

# Run RVIZ with config file
$ rosrun rviz rviz `rospack find rviz_configfiles_pkg`/d415_depth.rviz 

# Launch the Realsense depth stream + rviz with a predifined config
$ roslaunch pose_estimation_pkg rs_stream_depth.launch

# Check the package that the system has installed
pip freeze

PROBLEMS WITH ANACONDA AND ROS
we need to comment out the export of python from anaconda lines in the bashrc file 
The way to resolve this problem is to comment out the line:
`export PATH=/usr/bin/anaconda/bin:$PATH' in your BASHRC file.

On Jetson Nano I have installed OpenCV 3.4 from source and with CUDA:
$ cd && mkdir opencv_pkgs && cd opencv_pkgs
$ git clone -b 3.4 https://github.com/opencv/opencv_contrib.git
$ git clone -b 3.4 https://github.com/opencv/opencv.git
$ cd opencv
$ mkdir build
$ cd build
$ cmake -D CMAKE_BUILD_TYPE=RELEASE \-D CMAKE_INSTALL_PREFIX=/usr.....(.txt file in Jetson Nano ~/OpenCV_installed/OpenCV3.4_pkgs)
$ make -j4
$ sudo make install

HOW TO INSTALL FROM SCRATCH: moveit, ros-industrial UR pkg and ur5_e_moveit_config, hand-eye rviz calibration plugin, UR-ROS driver official
Pre setup: create a ws_moveit, ur_robot_ws and ur_driver_ws folders -> outside the git repository. (for examples: ~/ros_ws/)
Pre-setup dependencies: install rosdep (1. sudo apt-get install python-rosdep  2. sudo rosdep init). http://wiki.ros.org/rosdep
1. Install moveit from source in the ws_moveit workspace (link: https://moveit.ros.org/install/source/)
2. Build ros-industrial/universal-robot pkg from source in the ur_robot_ws workspace (link: https://github.com/ros-industrial/universal_robot)
3. Build MoveIt Hand-Eye Calibration pkg in ws_moveit workspace (link: https://ros-planning.github.io/moveit_tutorials/doc/hand_eye_calibration/hand_eye_calibration_tutorial.html)
    - IMPORTANT: the git clone link is wrong, the correct one is: git clone https://github.com/ros-planning/moveit_calibration.git
    - in JETSON NANO, I have modified the CMakeLists.txt file of moveit_calibration/*_plugin and *_gui:
        I have added in find_package....find_package(OpenCV 3.4 REQUIRED) -> to force the build process to use v3.4
    - in JETSON NANO, I run another extra command: sudo apt install libopencv3.2 
    - catkin_make is also working for both packages
4. Build the UR-ROS DRIVER as a binary package through the ROS distribution of ROS melodic in the ur_driver_ws (link: https://github.com/UniversalRobots/Universal_Robots_ROS_Driver#building)
    -  if there is any issue, check the google browser forder (there are some link from previous solved errors)

>>>HOW TO RUN UR ROS DRIVER with Moveit Package for UR5e (HAND-EYE Calibration)
$USER = carlos(laptop) or ccdn(jetsonNano)
1. ~/ros_ws/ur_driver_ws$ roslaunch ur_calibration calibration_correction.launch robot_ip:=192.168.10.20 target_filename:="/home/$USER/ros_ws/ur_driver_ws/src/Universal_Robots_ROS_Driver/ur_calibration/etc/ur5e_fixed_station_calibration.yaml"
2. ~/ros_ws/ur_driver_ws$ roslaunch ur_robot_driver ur5e_bringup.launch robot_ip:=192.168.10.20 kinematics_config:="/home/$USER/ros_ws/ur_driver_ws/src/Universal_Robots_ROS_Driver/ur_calibration/etc/ur5e_fixed_station_calibration.yaml"
3. ~/ros_ws/ur_robot_ws$ roslaunch ur5_e_moveit_config ur5_e_moveit_planning_execution.launch 
4. ~/ros_ws/ur_robot_ws$ roslaunch ur5_e_moveit_config moveit_rviz.launch config:=true (the HAND-EYE Calibration plugin is already setup)
5. ~/ros_ws/ur_driver_ws$ roslaunch pose_estimation_pkg rs_stream_depth.launch (camera node to get the topics from D415)
or
5. roslaunch realsense2_camera rs_camera.launch color_width:=1280 color_height:=720
>>> ALTERNATIVE (using Launch files)

>>>> LAUNCH FILES: 
# UR ROS DRIVER
$ cd ~/ros_ws/ur_driver_ws
$ roslaunch ur_robot_driver ur_establish_connection.launch (rs_calibration_ur5e_fixed.launch included HERE)

# RVIZ + HAND-EYE CALIBRATION plug-in
$ cd ~/ros_ws/moveit_ws
$ rviz (only for doing the HAND-EYE Calibration)

# REALSENSE DEPTH CAMERA CONNECTION + RVIZ visualization
$ cd ~/git/3DVisionMobileManipulation/catkin_ws
$ roslaunch pose_estimation_pkg rs_stream_depth.launch
$ roslaunch realsense2_camera rs_camera.launch color_width:=1280 color_height:=720 (without the RVIZ and DEPTH)

# UR5e PLANNING EXECUTION + MOVEIT CONFIG + RVIZ visualization
$ cd ~/ros_ws/ur_robot_ws
$ roslaunch ur5_e_moveit_config ur5_e_planning_moveit_rviz.launch
>>>>


INSTALL Open3D==0.9.0.0 with pip (USE THIS APPRAOCH IN THE JETSON NANO)
1. pip install pyrsistent==0.16.1
2. pip install -U pip setuptools twine
3. pip install open3d==0.9.0.0
4. sudo apt-get install ros-melodic-ros-numpy
5. pip install open3d-ros-helper (version installed 0.2.0.2)
6. pip install scikit-learn (version installed 0.20.4)


PACKAGES INSTALLED in laptop to use tf and do transformation:
1. sudo apt-get install ros-melodic-tf2-tools ros-melodic-tf

TF COMMANDS
info: RPY (roll pitch yaw) is rotation around ZYX
$ rosrun tf view_frames (save a frames.pdf file)
$ rosrun rqt_tf_tree rqt_tf_tree
$ rosrun tf tf_echo <source_frame> <target_frame> [echo_rate]

# Transformation of /camera_link frame respect to the /wrist_3_link frame
Homogeneous Transformation of /camera_link respect to /wrist_3_frame:
[[-0.00465274 -0.99986592 -0.01569957 -0.01900175]
 [-0.00812703  0.01573701 -0.99984307 -0.0842239 ]
 [ 0.9999562  -0.00452439 -0.00819913  0.01904847]
 [ 0.          0.          0.          1.        ]]
Translation: X Y Z
[-0.01900175 -0.0842239   0.01904847]
Rotation: quaternion
[ 0.49694298 -0.50709689  0.49515566  0.50072077]
$ rosrun tf static_transform_publisher -0.01900175 -0.0842239 0.01904847 0.49694298 -0.50709689  0.49515566  0.50072077 wrist_3_link camera_link 200.0

After applying the /wrist_3_link to /camera_link transformation, this is the result:
$rosrun tf tf_echo wrist_3_link camera_color_optical_frame
- Translation: [-0.034, -0.084, 0.019]
- Rotation: in Quaternion [0.007, -0.002, -0.007, 1.000]
            in RPY (radian) [0.014, -0.003, -0.015]
            in RPY (degree) [0.781, -0.188, -0.841]

After applying the /wrist_3_link /camera_color_optical_frame transformation from the moveit calibration, this is the result:
$ rosrun tf tf_echo wrist_3_link camera_color_optical_frame
- Translation: [-0.034, -0.084, 0.019]
- Rotation: in Quaternion [0.007, -0.002, -0.007, 1.000]
            in RPY (radian) [0.014, -0.003, -0.015]
            in RPY (degree) [0.796, -0.173, -0.858]

I CONFIRM THAT THE TRANSFORMATION IS CORRECT!!!!!!!!!!!!!




|
|
>>> NOT USED

CREATE THE RT_KERNEL for ur_driver (not used)
$ wget https://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/patch-5.4.93-rt51.patch.xz
$ wget https://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/patch-5.4.93-rt51.patch.sign
$ wget https://www.kernel.org/pub/linux/kernel/v5.x/linux-5.4.93.tar.xz
$ wget https://www.kernel.org/pub/linux/kernel/v5.x/linux-5.4.93.tar.sign


Install cmake 3.19.6 (on laptop)
1. cd ~/
2. mkdir cmake
3. cd cmake
4. version=3.19
5. wget https://cmake.org/files/v3.19/cmake-3.19.6.tar.gz
6. tar -xzvf cmake-3.19.6.tar.gz
6. cd cmake-3.19.6/
7. ./bootstrap
8. make -j4
9. sudo make install
10. check the version in a new terminal with: $cmake --version


Install Open3D in Ubuntu 18.04 (minimum cmake 3.18)
1. cd ~/git
2. git clone -b 0.11 https://github.com/intel-isl/Open3D
3. util/install-deps-ubuntu.sh 
cd 3rdparty/pybind11/
git submodule init && git submodule update
4. check the python version with: $which python and $python -v
5. mkdir build
6. cd build
7. cmake -DPYTHON_EXECUTABLE=/usr/bin/python3 -DBUILD_PYBIND11=OFF -DBUILD_PYTHON_MODULE=OFF ..
python2 is not longer suported (only until version open3d 0.9.0)
8. make -j$(nproc)
9. sudo make install
it will be installed in /usr/local/lib/cmake/Open3D/
the path for the library is /usr/local/include/open3d
(NOT WORKING WITH ROS)


Install Open3D 0.9 in Ubuntu 18.04 (can use python 2.7)
2. git clone -b v0.9.0 https://github.com/intel-isl/Open3D.git
3. util/scripts/install-deps-ubuntu.sh
7. cmake -DBUILD_EIGEN3=ON -DBUILD_GLEW=ON -DBUILD_GLFW=ON -DBUILD_JSONCPP=ON -DBUILD_PYBIND11=OFF -DBUILD_PYTHON_MODULE=OFF -DBUILD_PNG=ON -DGLIBCXX_USE_CXX11_ABI=ON -DPYTHON_EXECUTABLE=/usr/bin/python2.7 ..
installed:
-- Installing: /usr/local/lib/libOpen3D.a
-- Up-to-date: /usr/local/include/Open3D/Open3D.h
-- Up-to-date: /usr/local/include/Open3D/Open3DConfig.h
-- Installing: /usr/local/lib/cmake/Open3D/Open3DConfig.cmake
-- Installing: /usr/local/lib/cmake/Open3D/Open3DConfigVersion.cmake
(NOT WORKING WITH ROS)


Compile a C++ project using Open3D:
1. mkdir project_folder
2. script.cpp (#include <open3d.Open3D.h>)
3. CMakeLists.txt
4. cd project_folder/
5. cmake -D CMAKE_INSTALL_PREFIX=/usr/local/include ..
6. make -j
